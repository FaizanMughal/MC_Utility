// Copyright (c) 2018 Benjamin Moir. All rights reserved.
// This work is licensed under the terms of the MIT license.  
// To obtain a copy, visit <https://opensource.org/licenses/MIT>.

class DictionaryEntry
{
    Object key, val;
    DictionaryEntry next;
}

class Dictionary
{
    private uint m_Size;
    private class m_KeyClass;
    private class m_ValClass;
    private IEquatable m_Equater;
    private IHashable m_Hasher;
    private Array<DictionaryEntry> m_Table;

    static clearscope Dictionary Create(class keyClass, class valClass, uint initialCapacity = 16)
    {
        let dict = new("Dictionary");

        dict.m_KeyClass = keyClass;
        dict.m_ValClass = valClass;
        dict.m_Hasher   = IHashable.GetImpl(keyClass);
        dict.m_Table.Resize(initialCapacity);

        bool isDefault;
        [dict.m_Equater, isDefault] = IEquatable.GetImpl(keyClass);

        if(isDefault)
            ThrowAbortException("%s must implement IEquatable to be used as a key!", keyClass.GetClassName());

        return dict;
    }

    clearscope uint Size() { return m_Size; }

    void Clear() { m_Size = 0; m_Table.Clear(); }

    void Set(Object key, Object val)
    {
        if(!(key is m_KeyClass))
            ThrowAbortException("Argument 'key' must be assignable to variable of type '%s'", m_KeyClass.GetClassName());
        if(!(val is m_ValClass))
            ThrowAbortException("Argument 'val' must be assignable to variable of type '%s'", m_ValClass.GetClassName());

        uint hash  = m_Hasher.GetHash(key);
        uint index = hash % m_Table.Size();
        let  entry = m_Table[index];

        if(entry == null)
        {
            entry          = new("DictionaryEntry");
            entry.key      = key;
            entry.val      = val;
            m_Table[index] = entry;
            m_Size++;

            if(m_Size >= m_Table.Size() * .75)
                Resize(m_Table.Size() * 2);

            return;
        }

        while(entry)
        {
            if(m_Equater.Equals(key, entry.key))
            {
                entry.val = val;
                break;
            }

            if(entry.next == null)
            {
                entry.next     = new("DictionaryEntry");
                entry.next.key = key;
                entry.next.val = val;
                break;
            }
            else
                entry = entry.next;
        }
    }

    clearscope bool ContainsKey(Object key)
    {
        if(!(key is m_KeyClass))
            ThrowAbortException("Argument 'key' must be assignable to variable of type '%s'", m_KeyClass.GetClassName());

        return GetEntry(key) != null;
    }

    clearscope Object Get(Object key)
    {
        if(!(key is m_KeyClass))
            ThrowAbortException("Argument 'key' must be assignable to variable of type '%s'", m_KeyClass.GetClassName());

        let entry = GetEntry(key);
        return entry ? entry.val : null;
    }

    clearscope private DictionaryEntry GetEntry(Object key)
    {
        uint hash  = m_Hasher.GetHash(key);
        uint index = hash % m_Table.Size();

        for(let e = m_Table[index]; e; e = e.next)
        {
            if(m_Equater.Equals(key, e.key))
                return e;
        }

        return null;
    }

    private void Resize(int newCapacity)
    {
        Array<DictionaryEntry> temp;
        temp.Copy(m_Table);

        m_Table.Clear();
        m_Table.Resize(newCapacity);

        for(int i = 0; i < temp.Size(); i++)
        {
            for(let e = temp[i]; e; e = e.next)
                Set(e.key, e.val);
        }
    }
}
