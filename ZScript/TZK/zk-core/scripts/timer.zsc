// Copyright (c) 2018 Benjamin Moir. All rights reserved.
// This work is licensed under the terms of the MIT license.  
// To obtain a copy, visit <https://opensource.org/licenses/MIT>.

class Timer : Thinker
{
    private bool m_Enabled;
    private int m_Time;
    private int m_Interval;
    private class<Callback> m_OnElapsed;
    private Object m_Arg;

    static Timer Create(class<Callback> onElapsed, int interval, Object arg = null)
    {
        return CreateDerived("Timer", onElapsed, interval, arg);
    }

    static Timer CreateDerived(class<Timer> type, class<Callback> onElapsed, int interval, Object arg = null)
    {
        let t = Timer(new(type));
        t.m_Enabled   = false;
        t.m_Time      = 0;
        t.m_OnElapsed = onElapsed;
        t.m_Interval  = interval;
        t.m_Arg       = arg;
        return t;
    }

    void Start()
    {
        m_Enabled = true;
    }

    void Pause()
    {
        m_Enabled = false;
    }

    void Reset()
    {
        Pause();
        m_Time = 0;
    }

    override void Tick()
    {
        if(!m_Enabled) return;
        if(m_Time++ < m_Interval) return;

        Reset();

        if(m_OnElapsed)
            Callback.Invoke(m_OnElapsed, self, m_Arg);
    }
}
