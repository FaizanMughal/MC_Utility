// Copyright (c) 2018 Benjamin Moir. All rights reserved.
// This work is licensed under the terms of the MIT license.  
// To obtain a copy, visit <https://opensource.org/licenses/MIT>.

class RefPrimitive abstract
{
    virtual int ToInt() { return 0; }
    virtual double ToDouble() { return ToInt(); }
    virtual string ToString() { return string.Format("%d", ToInt()); }
}

class RefPrimitive_Impl_IHashable : IHashable
{
    override uint GetHash(Object this)
    {
        switch(this.GetClassName())
        {
        case 'RefInt8' : case 'RefUInt8'    :
        case 'RefInt16': case 'RefUInt16'   :
        case 'RefInt'  : case 'RefUInt'     :
        case 'RefName' : case 'RefTextureID':
            return RefPrimitive(this).ToInt() + 0;
        case 'RefDouble': case 'RefFloat': case 'RefString':
            return StringUtility.GetHash(RefPrimitive(this).ToString());
        }

        return 0;
    }
}

class RefPrimitive_Impl_IComparable : IComparable
{
    private ECompareResult CompareInt(int a, RefPrimitive other)
    {
        if(!other) return CMP_Invalid;
        int b = other.ToInt();
             if (a < b) return CMP_Lesser;
        else if (a > b) return CMP_Greater;
        else            return CMP_Equal;
    }

    private ECompareResult CompareDouble(double a, RefPrimitive other)
    {
        if(!other) return CMP_Invalid;
        double b = other.ToDouble();
             if (a < b) return CMP_Lesser;
        else if (a > b) return CMP_Greater;
        else            return CMP_Equal;
    }

    override ECompareResult Compare(Object this, Object other)
    {
        switch(this.GetClassName())
        {
        case 'RefInt8'     : case 'RefUInt8' :
        case 'RefInt16'    : case 'RefUInt16':
        case 'RefInt'      : case 'RefUInt'  :
        case 'RefTextureID':
            return CompareInt(RefPrimitive(this).ToInt(), RefPrimitive(other));
        case 'RefFloat': case 'RefDouble':
            return CompareDouble(RefPrimitive(this).ToDouble(), RefPrimitive(other));
        }

        return CMP_Invalid;
    }
}

class RefPrimitive_Impl_IEquatable : IEquatable
{
    override bool Equals(Object this, Object other)
    {
        switch(this.GetClassName())
        {
        case 'RefInt8'     : case 'RefUInt8' :
        case 'RefInt16'    : case 'RefUInt16':
        case 'RefInt'      : case 'RefUInt'  :
        case 'RefTextureID':
            return RefPrimitive(this).ToInt() == RefPrimitive(other).ToInt();
        case 'RefFloat': case 'RefDouble':
            return RefPrimitive(this).ToDouble() == RefPrimitive(other).ToDouble();
        case 'RefString': case 'RefName':
            return RefPrimitive(this).ToString() == RefPrimitive(other).ToString();
        }

        return false;
    }
}

class RefInt8 : RefPrimitive
{
    int8 value;
    override int ToInt() { return value; }

    static RefInt8 Create(int value)
    {
        let ref   = new("RefInt8");
        ref.value = value;
        return ref;
    }
}

class RefUInt8 : RefPrimitive
{
    uint8 value;
    override int ToInt() { return value; }

    static RefUInt8 Create(uint value)
    {
        let ref   = new("RefUInt8");
        ref.value = value;
        return ref;
    }
}

class RefInt16 : RefPrimitive
{
    int16 value;
    override int ToInt() { return value; }

    static RefInt16 Create(int value)
    {
        let ref   = new("RefInt16");
        ref.value = value;
        return ref;
    }
}

class RefUInt16 : RefPrimitive
{
    uint16 value;
    override int ToInt() { return value; }

    static RefUInt16 Create(uint value)
    {
        let ref   = new("RefUInt16");
        ref.value = value;
        return ref;
    }
}

class RefInt : RefPrimitive
{
    int value;
    override int ToInt() { return value; }

    static RefInt Create(int value)
    {
        let ref   = new("RefInt");
        ref.value = value;
        return ref;
    }
}

class RefUInt : RefPrimitive
{
    uint value;
    override int ToInt() { return value; }

    static RefUInt Create(uint value)
    {
        let ref   = new("RefUInt");
        ref.value = value;
        return ref;
    }
}

class RefFloat : RefPrimitive
{
    float value;
    override int ToInt() { return int(value); }
    override double ToDouble() { return value; }
    override string ToString() { return string.Format("%f", value); }

    static RefFloat Create(double value)
    {
        let ref   = new("RefFloat");
        ref.value = value;
        return ref;
    }
}

class RefDouble : RefPrimitive
{
    double value;
    override int ToInt() { return int(value); }
    override double ToDouble() { return value; }
    override string ToString() { return string.Format("%g", value); }

    static RefDouble Create(double value)
    {
        let ref   = new("RefDouble");
        ref.value = value;
        return ref;
    }
}

class RefName : RefPrimitive
{
    name value;
    override int ToInt() { return int(value); }
    override string ToString() { return value; }

    static RefName Create(name value)
    {
        let ref   = new("RefName");
        ref.value = value;
        return ref;
    }
}

class RefString : RefPrimitive
{
    string value;
    override int ToInt() { return value.ToInt(); }
    override double ToDouble() { return value.ToDouble(); }
    override string ToString() { return value; }

    static RefString Create(string value)
    {
        let ref   = new("RefString");
        ref.value = value;
        return ref;
    }
}

class RefTextureID : RefPrimitive
{
    TextureID value;
    override int ToInt() { return int(value); }
    override string ToString() { return TexMan.GetName(value); }

    static RefTextureID Create(TextureID value)
    {
        let ref   = new("RefTextureID");
        ref.value = value;
        return ref;
    }

    static RefTextureID CreateFromInt(int value)
    {
        TextureID tex;
        tex.SetNull();
        tex += value;
        return Create(tex);
    }
}
